<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="classpath*:basic-config.properties" file-encoding="UTF-8"/>
    <!-- Druid数据源配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName"    value="${database_driver}"/>

        <!-- 基本属性 url、user、password -->
        <property name="url"                value="${database_connect_url}"/>
        <property name="username"           value="${database_username}"/>
        <property name="password"           value="${database_password}"/>

        <!-- 连接池初始化连接数量大小、最大、最小 -->
        <property name="initialSize"        value="${database_initial_size}"/>
        <property name="maxActive"          value="${database_max_active}"/>
        <property name="minIdle"            value="1"/>

        <!-- 获取连接最大等待超时的时间 -->
        <property name="maxWait"            value="60000"/>

        <property name="validationQuery"    value="SELECT 1"/>
        <property name="testOnBorrow"       value="false"/>
        <property name="testOnReturn"       value="false"/>
        <property name="testWhileIdle"      value="true"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis"  value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis"     value="25200000"/>
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned"                value="true"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout"         value="1800"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned"                   value="true"/>
        <!-- 监控数据库，去掉后监控界面sql无法统计 -->
        <property name="filters"                        value="stat"/>
    </bean>

    <!-- spring和MyBatis整合，使用mybatis-plus的sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置 Mybatis 配置文件（可无） -->
        <property name="configLocation"  value="classpath:mybatis/mybatis-config.xml"/>
        <!-- 自动扫描mapping.xml文件，**表示迭代查找 -->
        <property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"/>

        <!-- 以上配置和传统 Mybatis 一致，以下为MP功能配置 -->

        <!-- 插件配置 -->
        <property name="plugins">
            <array>
                <!-- 分页插件配置, 参考文档分页插件部分！！ -->
                <!-- 如需要开启其他插件，可配置于此 -->
            </array>
        </property>

        <!-- MP 全局配置注入 -->
        <property name="globalConfig" ref="globalConfig"/>
    </bean>

    <!-- 定义 MP 全局策略 -->
    <bean id="globalConfig" class="com.baomidou.mybatisplus.entity.GlobalConfiguration">
        <!-- 主键策略配置 -->
        <!-- 可选参数
            AUTO->`0`("数据库ID自增")
            INPUT->`1`(用户输入ID")
            ID_WORKER->`2`("全局唯一ID")
            UUID->`3`("全局唯一ID")
        -->
        <property name="idType" value="0"/>

        <!-- 数据库类型配置把   POSTGRE->`postgresql` -->
        <property name="dbType" value="postgresql"/>

        <!-- 全局表为下划线命名设置 true -->
        <property name="dbColumnUnderline" value="true"/>
    </bean>

    <!-- mapper.xml文件刷新 -->
    <bean class="com.baomidou.mybatisplus.spring.MybatisMapperRefresh">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <constructor-arg name="mapperLocations" value="classpath:mybatis/mapper/*.xml"/>
        <constructor-arg name="delaySeconds" value="5"/>
        <constructor-arg name="sleepSeconds" value="20"/>
        <constructor-arg name="enabled" value="${enabled_mapper_refresh}"/>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.pikaqiu.dal.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 事务管理: DataSourceTransactionManager dataSource:引用上面定义的数据源 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 使用声明式事务  transaction-manager：引用上面定义的事务管理器
        在公有方法或者类级别上添加 @Transactional 注解. 当把这个注解应用到类上时, 这个类中的所有公共方法都会被定义成支持事务处理的.
     -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>